always have a default spritesheet loaded

Documentation to put in the editor somewhere:
-When an enemy is killed, all bullets attached to it will despawn
-Sprite names cannot contain the characters '[' ']'
-No two sprite/animation can have the same name
-Idle/movement animatables can be sprites, but attack animatable must be an animation
-It is highly recommended that all animatables in all EntityAnimatableSets of all enemy phases in the same enemy look similar (have the same hitbox and sprite origin)
 because hitboxes and origins cannot change
-EMPs with HomingEMPA cannot spawn attached to some parent
-It is recommended that only bosses are able to play music
-The background view is 1:1. That is, the user will see a MAP_WIDTH x MAP_HEIGHT pixel rectangle of the background at any time
-BlendMode in BloomSettings should be left at default unless the user really knows what they're doing
-Attacks in ExecuteAttacksDeathAction cannot have EntityAttachedEMPSpawn
-The particle animatable in ParticleExplosionDeathAction is meant to be colored by the color field. 
 Meaning, the color specified in the Animatable's sprite sheet entry will be ignored.
-Due to limitations with the GUI library, animations with differing sprite sizes will always scale to fit the preview
-An EditorAttackPattern "finishes" when all its EMPAs have been executed.
 Attacks that execute after the time it takes for an attack pattern to finish will not execute.

Tips to put in editor somewhere:
-For a classic bullet hell, all enemy bullets should do 1 damage
-In MainEditorWindow:
    -Last mouse press was on attacks list:
        -control+s -> save selected attacks
        -control+shift+s -> save all unsaved attacks
        -control+a -> select all attacks
        -control+c -> copy selected attacks
        -control+v -> paste selected attacks as new attacks
        -control+shift+v -> paste selected attacks, overriding currently selected attacks
    -Last mouse press was on an attack tab:
        -control+s -> save the open attack
        -Attack tab's currently open tab is Properties:
            -control+v -> paste the first selected attack, overriding the properties of the tab attack
        -Attack tab's currently open tab is EMPs:
            -control+c -> copy the selected EMP
            -control+v -> paste the selected EMP as a child of the currently selected EMP; if none selected, do nothing
            -control+shift+v -> paste the selected EMP, overriding the currently selected EMP
        -Attack tab's currently open tab is some EMP:
            -control+v -> paste the selected EMP, overriding everything except the children (so everything that's editable
                in that tab) of the tab EMP
-In tooltips of expression variables: put whether it will evaluate to an int or a float
-symbol_tables from lower-level objects take precedence over ones from higher-level objects when compiling expressions
    and the same symbol is used multiple times
-The transition time of a level music determines how long it takes for music to change back after killing a boss
-The EMPA list visualizer for an EMP will have starting position (0, 0) if the EMP spawn position uses variables. It also
    does not take into account for the EMP being attached to a parent.
-User-defined sprite colors are modulated (multiplied) with the original sprite

Notes for me:
-The mainEMP of an attack is always spawned at the exact same time of an attack; spawnType's time is ignored
-Remember to call animatableSetComponent.changeState on player when it attacks
-All sf::Sprite pointers in all Animations point to the same sf::Sprite object (if same name), so sf::Sprites from Animations must never be
 modified, since it will change all other Animations. On the other hand, all sf::Sprite pointers in each SpriteComponent point to unique sf::Sprite
 objects, so the sf::Sprite pointer in SpriteEffectAnimation MUST point to a SpriteComponent's pointer (so when setting SpriteEffectAnimation, 
 spriteComponent.getSprite() must be used) so that other sf::Sprites are not affected.
-Sprite origin and hitbox origin must be the same values
-sf::Sprite's origin is relative to the texture's top-left coordinates and ignores scale/rotation/transformations
-All TFVs in the editor are stored internally as PiecewiseContinuousTFVs
-To loop an animation x times, copy paste the frame data x times
-Since LevelPack::playSound/Music adds the "Level Packs/level_pack_name/..." to sound/music file names, any sound or music that is located
 in the level pack folder must be played through LevelPack
-Since HitboxComponent's update is only for updating hitbox disable time and only the player's hitbox can be disabled, only the player's hitbox is updated
 in CollisionSystem. Change to update all HitboxComponents if this changes.
-A bullet's attack pattern id of -1 means that the bullet came from a DeathAction; for enemy bullets, an enemy phase ID of -1 also means the same thing
-Editor_______ objects returned by getters in LevelPack should never be modified without calling update______ (eg updateAttack()). I'm
 too lazy to make them return pointers to const objects so just don't modify anything when making the editors
-Why paste2 in LevelPackObjectsListView can't be undoable:
    Things to note:
        -The attack pointer in AttackEditorPanel CANNOT be changed to point to something else (because of the pointers in its undo stack)
        -When openLeftPanelAttack() is called, the new AttackEditorPanel has a pointer to either an attack 
            from unsavedAttacks or an entirely new object
        -If reloadAttackTab() is called on an open tab, right now, it removes the AttackEditorPanel and adds it again
            using an attack from unsavedAttacks or an entirely new object
        -When overwriteAttacks() is called on a saved attack, a new attack with the same ID goes into unsavedAttacks
            So when overwriteAttacks() is called on some saved attack, any existing AttackEditorPanel will have a pointer
            to an outdated attack.
    -So then solution is to check if a saved attack being overwritten has its AttackEditorPanel open. If it is, instead of 
        making a new attack with the same ID for unsavedAttacks, overwrite the attack object as taken from the AttackEditorPanel.
        This guarantees that any AttackEditorPanel can keep its attack pointer. Then change reloadAttackTab() so that it doesn't remove
        the AttackEditorPanel and have it close all closeable tabs in the attack tab and reload all widgets
    -But then: if an attack is overwritten in leftPanel's undo stack and the AttackEditorPanel maintains its undo stack, the
        AttackEditorPanel's undo stack will be desynced so future undos could bug out/not work as intentional
-Item path is in Components::CollectibleComponent::update and EntityCreationQueue::EMPDropItemCommand::execute
-Player invulnerability sprite effect animation is in CollisionSystem  
-Explanation of how expressions work with an overall LevelPack:
    -Key concepts
        -Redelegation of a symbol cannot occur in the top-level objects Level and Player.
        -Let an object that has a 1-1 relationship with its parent be called a unique object.
        -An object that is not an unique object (ie it is used elsewhere only by ID and not by a unique reference to that 
            object (Attack, AttackPattern, EnemyPhase, Enemy, Player, BulletModel)) cannot have references 
            to a SymbolTable that will define every redelegated symbol because that object can have many users.
                -Let A be an object being used only by ID and B be some user of A.
                    Everywhere where B refers to A by ID, B must also keep a SymbolTable for just A 
                    that defines ALL symbols redelegated in A.
                        -eg "std::vector<std::tuple<float, int, SymbolTable>> attackIDs" in AttackPattern
                -Then the problem becomes somehow having A use B's SymbolTable.
                    (However, let's say some AttackPatten C and AttackPattern D both use Attack ID 0 at the same time. 
                    How can that Attack use both C and D's SymbolTable?)
                        -One solution is to use LevelPack::getGameplayAttack/AttackPattern/EnemyPhase/Enemy/Player/BulletModel/Level() 
                            everywhere in gameplay only (it is very important that nothing changes for the editor). 
                            This getGameplay_____(int id, exprtk::symbol_table parentTable)
                            will return a clone of the object (this cloning can be done more quickly by not populating
                            the std::map<int, int> ID counter in most LevelPackObjects) and a 
                            exprtk::symbol_table that defines all symbols in the clone's SymbolTable to be used
                            for the clone's expressions and any of its unique objects' expressions.
                        -Base case: A top-level object has a fully defined symbol_table
                            Recursive step: Some lower-level object needs to be created in gameplay. 
                                Using the higher-level object, every expression in the lower-level object's SymbolTable can be evaluated
                                using the symbol_table in the higher-level object to create the lower-level symbol_table.
        -A unique object uses only its parent nonunique object's ValueSymbolTable
        -A relationship between a nonunique object and a nonunique nontop-level object (BulletModel, Attack, 
            AttackPattern, EnemyPhase, Enemy) must also have an ExprSymbolTable as part of the relationship that will be
            used to evaluate the value of every redelegated symbol in the lower-level object's ValueSymbolTable
        -At each recursive compileExpressions call within the same layer (see the "Expressions Compiling Tree" horizontal lines
            for what constitutes a layer. The basic idea is that each layer has at most one nonunique object and includes all of that
            object's unique objects. Only the top layer, which has both Player and Level, has more than one nonunique object), the current
            object can push_back to the list of symbol_tables. Symbol_tables from lower-level objects take precedence over ones from
            higher-level objects this way. 
    -More information
        -"Everywhere where B refers to A by ID, B must also keep a SymbolTable for just A that defines ALL symbols redelegated in A"
            -Say the user is editing an AttackPattern B that uses some Attack C and Attack D. The user wants to redelegate some variables
                "c" in C and "d" in D to whatever will use B. However, all symbols in C and D must be defined. The user can define
                "c" and "d" to be equal to "e", a symbol in B's SymbolTable that will be redelegated.
    -Important for gameplay preview: modifying symbol tables will not modify the expression compiled values, so an object's
        compileExpressions() must be called whenever its expressions or symbol table is modified. This is not relevant in actual
        gameplay because the level pack cannot be modified there.
    -When creating the symbol table that will define all redelegated symbols in a child object, 
        definer.toLowerLevelSymbolTable(symbolTables) should be called, where definer is the ExprSymbolTable that 
        defines all redelegated symbols in the child object in terms of symbolTables.
-Some widgets use ChildWindows and need to call handleEvent() of widgets in those ChildWindows. However, ChildWindows need to
    be added to the GUI directly to avoid layering issues. But handleEvent() propagation occurs in the widget (let this be 
    called widget A) that instantiated the ChildWindow. A::handleEvent() is usually called only when A is focused. But when A 
    is focused, the ChildWindow cannot be focused, but A should only propagate events when the ChildWindow is focused. So then 
    the ChildWindow's handleEvent() is never called. To avoid this problem, EditorWindow uses addChildWindow() to maintain a 
    list of ChildWindows whose handleEvent() will be called directly from the EditorWindow.
-getPathToFolderContainingExe() when debugging from Visual Studio returns the path to the .exe in the Debug build artifacts
    folder while a local path uses the BulletHellMaker folder, so there can be mismatch issues unless the .exe is moved
    to the BulletHellMaker folder. This problem won't happen in release, since the local path will be the same as the path
    to the .exe.
-Known minor bugs:
    -Change sum of durations of actions in EMPABasedMovementEditorPanel 
        -> empiDespawnTime in EditorMovablePointPanel max changes, causing its value to change if value > new max 
        -> undo in EMPABasedMovementEditorPanel -> empiDespawnTime max changes back, but its value doesn't change back
    -BezierControlPointsPlacer movement path is drawn over the panels
    -MarkerPlacer snap to grid doesn't work when adding a new marker
    -EMPABasedMovementEditorPanel: when the EMPA list is modified, the visualizer special color for the selected EMPA
        disappears. This happens because EditorMovablePointActionsListView does not receive an item selection signal in updateEMPAList() 
        due to TGUI's ListView not emitting a signal for multiple selected indices.
-TGUI's Widget that have layouts (size/position) that are bound to a parent widget (eg "25%") can emit their "onSizeChange" signal
  BEFORE their parents' layouts are updated, causing the children layouts to get messed up. This can be avoided by
  updating the child's size directly (using floats rather than something like "25%") in the parent's onSizeChange.
    -Very noticeable when something in an onSizeChange handler uses getAbsolutePosition()
-Known big bugs:
    -Player death -> death sound plays every time player gets hit again
        -This is only because player death hasn't been implemented yet in CollisionSystem
    -when focused on main editor window, inputs still go to preview window
    -TGUI edit box eats all inputs, including control+z/control+y to undo/redo
    -log files not getting deleted at all
    
current todo:
-PlayerPowerTier->AttackPattern                  int id, ExprSymbolTable
 EnemySpawnInfo->Enemy                           int id, ExprSymbolTable
 Enemy->EnemyPhase                               vector<shared_ptr<EnemyPhaseStartCondition>, int id, EntityAnimatableSet, ExprSymbolTable>>
 ExecuteAttacksDeathAction->Attack               vector<int id, ExprSymbolTable>
 EnemyPhase->AttackPattern                       vector<string time, int id, ExprSymbolTable>
 AttackPattern->Attack                           vector<string time, int id, ExprSymbolTable>
 EMP->BulletModel                                int id
-a listview (exactly like the one created in MainEditorWindow::populateLeftPanelLevelPackObjectListPanel except
 without "Save" right click selection); when doubleclicked/opened, populate a panel to the right of the listview;
 for relationships without vectors, have just the panel
    -levelpackobject deleted -> levelpack emits LevelPackObjectDeleted signal
    -LevelPackObjectDeleted emits std::shared_ptr<Editor_____> of object that is about to get deleted; MainEditorWindow
     captures signal and gets all of that object's users (separate signal for each level pack object type) -> updates
     each user's usages such that the ID field of the about-to-be-deleted object relationship becomes -1 ("unselected" to
     the user); this operation should modify the MainEditorWindow's unsavedAttacks/unsaved______ (for the users);
     any user's open tab should reload its LevelPackObjectUseRelationshipEditor
-Preview panel as a separate window; the object being previewed changes depending
 on the currently selected first-level tab in MainEditorWindow::mainPanel (have some "SelectedTabChanged" signal in TabsWithPanel)
    -If the object isn't legal, the preview panel will show the error message from legal()
    -if you see some weird bugs with the physics it's probably because of how i changed EditorWindow's main loop
    -ValueSymbolTableEditor that edits some ValueSymbolTable additionalTable; then additionalTable is combined
        with the symbolTable of the object being previewed such that every symbol in symbolTable is replaced by
        the one in additionalTable if it exists; additionalTable can't be redelegated; every redelegated symbol in
        symbolTable must be defined by additionalTable or else the preview won't start
    -surround SimpleEngineRenderer in some try catch that prints exceptions to the user
    
Random things for TODOs that are noted here so I don't forget:
-legal check for EMP should make sure there aren't illegal detach actions
-don't allow DetachFromParentEMPAs to exist in attack patterns' actions
-legal checks for everything should make sure all IDs used (ie attack IDs in attack patterns) are valid

TODO:
-MarkerPlacer "add" button should insert marker at selected index; last if none selected
-make tabs be lighter color blue by default; turn dark blue only if the tabs widget is focused (not sure how to do this
    yet since the TabsWithPanel itself might not have focus, but rather the panel or a widget inside the panel)
-fix tgui so that middle mouse press event will focus a widget
-indicator somewhere in MainEditorWindow leftPanel when there are unsaved changes to the level pack due to a created LevelPackObject
-illegal level pack objects have [!] in maineditorwindow's left panel's list view
-replace all in menu bar
    -replace all instances of an attack pattern ID with some other ID (same for all other relationships)
    -replace all instances of an animatable with another
-MoveCustomFunctionEMPA: an EMPA where x and y are expressions that can use a special symbol "t" defined in CustomFunctionMP to be
    the "time" parameter in CustomFunctionMP::evaluate(float time)
-Dialogue boxes
-LevelPack emits signals for Attack/AttackPattern/Enemy/EnemyPhase/BulletModel every time one is changed (unique signal for each)
	-make sure to update:
		-AttackEditor: None
		-EMP: Done
-Animatables can't have backslashes in name
-have some default attack patterns (https://www.youtube.com/watch?v=xbQ9e0zYuj4)
-all default stuff (font, spritesheet, sounds, etc) are copied into every new level pack that is created so that no special code is needed to load
 from a default resource 
-bosses can only be spawned if the condition is that there are 0 enemies so that there can only be 1 boss at a time
-Default level pack in setup-assets is broken
-Editor features
	-"Rotate bullet path": user can select multiple EMPActions (even across different bullets) and rotate them
		-for MoveCustomPolarEMPA, this just wraps the angle TFV in a TranslationWrapperTFV (remember to combine the TFVs if the angle TFV is already a TranslationWrapperTFV)
		-for MoveCustomBezierEMPA, this rotates all control points about (0, 0)
		-for all other EMPAs, do nothing
    -import bezier control points from text into BezierControlPointsPlacer

Low priority TODO:
-Custom shaders applied as a LevelEvent + part of an Attack
-Background thread that autosaves everything that the user can restore Level Packs from; runs on a timer
-"rename all" feature for LevelPackSearchChildWindow; after clicking apply, run findAll to get an updated
    LevelPackSearchFindAllResult and compare against the preview one; if matching, just do apply. if not
    matching, inform the user about a change being detected and update the Results tab without doing the apply:
    "Warning: There was a mismatch between the list of items to be replaced and the previewed list. The previewed list has now
        been updated. Clicking apply again will attempt the \"Replace all\" operation again."
-right click > open to open a LevelPackSearchFindAllResult node:
    -When user tries to right click and open a thing, surround in a try/catch and just display something
        like "object no longer exists. try searching again" when some exception occurs
-SpriteSheetMetafileEditor initial background color should come from some preferences file (for the editor, not for each Level Pack)
-Async ReadDirectoryChangesW for SpriteLoader watching changes to its level pack's sprite sheets folder
    and keeping the list of loaded sprite sheets consistent with the folder
	  
// ------------------------------------------------------------------------------------------------------------------------------------------------
editable = attack/attack pattern/emp/enemy/enemyphase/player
id-editable = attack/attack pattern/enemy/enemyphase

when simulating (testing) in the editor, 
give all entites an Editor(EnemyBullet/Enemy/Player)Component that has the ids of the Editor______ objects so that
user can click on a bullet/enemy and view the attack/attackpattern/emp/enemy/enemyphase/player it belongs to

click entity --> opens up windows/tabs/whatever for all the Editor_____ components it has; ie:
Click enemy bullet --> open Attack, AttackPattern, Enemy, EnemyPhase
Click enemy --> open Attack, AttackPattern, Enemy, EnemyPhase
Click player --> open Player

When making changes to and then saving an editable that is used by multiple other editables one layer up
(enemy > enemy phase; enemy > attack pattern; attack pattern > attack), ask user to confirm before saving ("this change will affect multiple other enemies/attack patterns")

every editable is local only to the level pack
user can load a different level pack and choose which id-editables to import
// ------------------------------------------------------------------------------------------------------------------------------------------------


// ------------------------------------------------------------------------------------------------------------------------------------------------
Sprite sheet editor:
1. User creates a new sprite sheet and gives it a name
2. User loads an image associated with that sprite sheet
3. User can select rectangles in the image to be saved as textures in the sprite sheet meta file. User can specify color and sprite size of the texture.

Todo: make sure sprite sheet name is a valid file name
Note: the sprite sheet name is the meta file's name, but the sprite sheet image's name can be anything. It doesn't necessarily have to be the same
as the sprite sheet name.
// ------------------------------------------------------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------------------------------------------------------
Level editor:
1. User populates a list of enemies to spawn and their spawn locations (see Main MP spawn locations under Attack editor)
// ------------------------------------------------------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------------------------------------------------------
Enemy editor:
1. User attaches a sprite, spritesheet, and hitbox to the enemy
2. User specifies enemy HP
3. User populates a list of enemy phases and how they activate (EnemyPhaseStartCondition)
4. User gives enemy a name --> it is saved
// ------------------------------------------------------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------------------------------------------------------
Enemy phase editor:
1. User populates a phase with a list of attack pattern names and when they occur
2. User gives the phase a name --> it is saved
// ------------------------------------------------------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------------------------------------------------------
Attack editor:

EMPAs to add:
//TODO: maybe EMPA for hovering (double dampened movement along some user-defined axis) (only in GUI)
Loop a group of actions [x] times (user specifies odd or even expansion)
// ------------------------------------------------------------------------------------------------------------------------------------------------