always have a default spritesheet loaded

Documentation to put in the editor somewhere:
-When an enemy is killed, all bullets attached to it will despawn
-Sprite names cannot contain the characters '[' ']'
-No two sprite/animation can have the same name
-Idle/movement animatables can be sprites, but attack animatable must be an animation
-It is highly recommended that all animatables in all EntityAnimatableSets of all enemy phases in the same enemy look similar (have the same hitbox and sprite origin)
 because hitboxes and origins cannot change
-EMPs with HomingEMPA cannot spawn attached to some parent
-It is recommended that only bosses are able to play music
-The background view is 1:1. That is, the user will see a MAP_WIDTH x MAP_HEIGHT pixel rectangle of the background at any time
-BlendMode in BloomSettings should be left at default unless the user really knows what they're doing
-Attacks in ExecuteAttacksDeathAction cannot have EntityAttachedEMPSpawn
-The particle animatable in ParticleExplosionDeathAction is meant to be colored by the color field. 
 Meaning, the color specified in the Animatable's sprite sheet entry will be ignored.
-Due to limitations with the GUI library, animations with differing sprite sizes will always scale to fit the preview

Tips to put in editor somewhere:
-For a classic bullet hell, all enemy bullets should do 1 damage

Notes for me:
-The mainEMP of an attack is always spawned at the exact same time of an attack; spawnType's time is ignored
-Remember to call animatableSetComponent.changeState on player when it attacks
-All sf::Sprite pointers in all Animations point to the same sf::Sprite object (if same name), so sf::Sprites from Animations must never be
 modified, since it will change all other Animations. On the other hand, all sf::Sprite pointers in each SpriteComponent point to unique sf::Sprite
 objects, so the sf::Sprite pointer in SpriteEffectAnimation MUST point to a SpriteComponent's pointer (so when setting SpriteEffectAnimation, 
 spriteComponent.getSprite() must be used) so that other sf::Sprites are not affected.
-Sprite origin and hitbox origin must be the same values
-sf::Sprite's origin is relative to the texture's top-left coordinates and ignores scale/rotation/transformations
-All TFVs in the editor are stored internally as PiecewiseContinuousTFVs
-To loop an animation x times, copy paste the frame data x times
-Since LevelPack::playSound/Music adds the "Level Packs/level_pack_name/..." to sound/music file names, any sound or music that is located
 in the level pack folder must be played through LevelPack
-Since HitboxComponent's update is only for updating hitbox disable time and only the player's hitbox can be disabled, only the player's hitbox is updated
 in CollisionSystem. Change to update all HitboxComponents if this changes.
-A bullet's attack pattern id of -1 means that the bullet came from a DeathAction; for enemy bullets, an enemy phase ID of -1 also means the same thing

-Item path is in Components::CollectibleComponent::update and EntityCreationQueue::EMPDropItemCommand::execute
-Player invulnerability sprite effect animation is in CollisionSystem

-TreeView double click on emptiness --> crash
-TreeView node icon hitbox only in upper half
-TreeView default (when there are no textures) icon bounds incorrect size if setItemHeight is called after setSize
-attack ID 13 is messed up

big todo:
-HUGE BUG: when gameplay test in progress, changes made to the level pack can blow up the test
	solution: maybe make a copy of the level pack and send it to all _____Systems when gameplay test begins;
		when gameplay test ends, the OG level pack is used again
-make "start test" do something when editing CPs
-visualize movement path when editing bezier control points (implement visualizer for EMP in a general way such that it can easily be applied to just a single EMPA; then
	create a temp bezier EMPA that contains unsaved changes that will be used solely to visualize path)
-improve how popups in editor windows work (how right now mousepressed is the event that chooses the option)
-gameplay window turn list boxes into scrollable ones
-have bezier TFV support infinite control points
-select placeholder -> color it differently
-think about how to implement empaiBezierControlPoints
	-edit button that sets gameplay test window into bezier edit mode:
		0. some indicator on attack editor to let user know that everything in attack editor is disabled until
			(panel that covers entire screen with only a Label: "Currently editing bezier control points for Attack #, EMP #, EMPA index #")
			-> 
		1. caches current state of all placeholders (including player) into some list of placeholders
		2. deletes all placeholders
		3. adds a placeholder for every control point that corresponds to that control point; selected placeholders can't have their 
			test modes/test mode ids be changed; adding a new placeholder is equivalent to adding a new control point; running gameplay test 
			caches then deletes all placeholders, creates a single placeholder in EMPA test mode (see below) with ID of EMPA being edited, and
			runs gameplay test normally; when gameplay test ends, delete all placeholders and then restore the placeholders from the cache created in
			this step
		4. when "finish editing" button is pressed, the EMPA being edited has its control points set according to the placeholders. the cached placeholders
			from #1 are put back, and bezier edit mode is exited; call AttackEditor::populateEmpaiBezierControlPoints(); if gameplay test is being run, end it first
		5. also have a "discard and exit" button that does all of #4 but doesn't control points aren't set
-add to attack editor: 
	-test EMP button
		-places a single placeholder in the gameplay test window in a special EMP test mode (this test mode can't be chosen by user) that tests
		 am EMP and plots its movement (even before test starts)
			-the EMP object is stored in the placeholder; no IDs are stored so that test EMPA button can be implemented easily
			-test mode and ID of this special placeholder can't be changed
-call LevelPack::deleteTemporaryEditorObjecs() when test ends or when an editor instance is closed
-control+s to save current attack; control+shift+s to save all attacks
	-when saving a single attack, do legal check on that attack only
-disable time thing (empiSpawnTypeTime) if it's the main EMP
-when empiActions changes, make sure Detach option is still valid; turn text red if not
-select EMPA --> EMPA is shown on gameplay windows
 a draggable/movable dot labeled "source" is shown (if EMP spawn type is global, the source isn't movable); the total path (a bunch of dots at an adjustable time interval)  
 is drawn from the source; if an EMPA is selected, the dots of that particular EMPA are colored differently

TODO:
-animatables can't have backslashes in name
-change all setposition and setsize to use "25%" or whatever
-change size of animatablepicture to match texture's aspect ratio
-SpriteSheetLoader emits some signal every time a change is made (sprite/spritesheet added/deleted)
-legal checks for everything should make sure all IDs used (ie attack IDs in attack patterns) are valid
-LevelPack emits signals for Attack/AttackPattern/Enemy/EnemyPhase/BulletModel every time one is changed (unique signal for each)
	-make sure to update:
		-AttackEditor
			-empiBulletModel items + reload selected EMP with setEMPWidgetValues, empiAnimatable items + reload selected EMP with setEMPWidgetValues, 
			empiBaseSprite items + reload selected EMP with setEMPWidgetValues, 
-Animatables can't have backslashes in name
-somehow downsample before bloom shaders
-all editor windows have the same LevelPack open such that when some attack changes or something, all open windows are notified and refreshed
-have some default attack patterns (https://www.youtube.com/watch?v=xbQ9e0zYuj4)
-all default stuff (font, spritesheet, sounds, etc) are copied into every new level pack that is created so that no special code is needed to load
 from a default resource 
-bosses can only be spawned if the condition is that there are 0 enemies so that there can only be 1 boss at a time
-Settings class; textmarshallable
-Make a global bloom settings thing where the user can disable bloom for a certain layer (or all layers) across all LevelPacks they play
 if there's too much lag or something
-Change sprite sheet meta files to use TextMarshallable
	-Due to the user-unfriendliness of text-marshalled files, this should only be done if an image viewer can be implemented in the editor
	 that can zoom in and make rectangles so that the user has full control of 
	  setting origin/rectangle_coords/everything_field_in_sprite_sheet_metadata in the editor
-Editor features
	-"Rotate bullet path": user can select multiple EMPActions (even across different bullets) and rotate them
		-for MoveCustomPolarEMPA, this just wraps the angle TFV in a TranslationWrapperTFV (remember to combine the TFVs if the angle TFV is already a TranslationWrapperTFV)
		-for MoveCustomBezierEMPA, this rotates all control points about (0, 0)
		-for all other EMPAs, do nothing
	-"Set bullet model": user can select multiple EMPs and set their bullet models
	  
// ------------------------------------------------------------------------------------------------------------------------------------------------
editable = attack/attack pattern/emp/enemy/enemyphase/player
id-editable = attack/attack pattern/enemy/enemyphase
one big editor instead of multiple things for each editable

when simulating (testing) in the editor, 
give all entites an Editor(EnemyBullet/Enemy/Player)Component that has the ids of the Editor______ objects so that
user can click on a bullet/enemy and view the attack/attackpattern/emp/enemy/enemyphase/player it belongs to

click entity --> opens up windows/tabs/whatever for all the Editor_____ components it has; ie:
Click enemy bullet --> open Attack, AttackPattern, Enemy, EnemyPhase
Click enemy --> open Attack, AttackPattern, Enemy, EnemyPhase
Click player --> open Player

When making changes to and then saving an editable that is used by multiple other editables one layer up
(enemy > enemy phase; enemy > attack pattern; attack pattern > attack), ask user to confirm before saving ("this change will affect multiple other enemies/attack patterns")

every editable is local only to the level pack
user can load a different level pack and choose which id-editables to import
// ------------------------------------------------------------------------------------------------------------------------------------------------


Move custom = player chooses the MP to use and manually defines the relevant TFVs
TODO: find some way of loading and saving TFVs and MPs such that no duplicate ones are created
eg if there are 500 sub-MPs with 1 MP as reference, make sure there won't be 500*500 MPs created

MP = movable point
global position = position ignoring all references

// ------------------------------------------------------------------------------------------------------------------------------------------------
Sprite sheet editor:
1. User creates a new sprite sheet and gives it a name
2. User loads an image associated with that sprite sheet
3. User can select rectangles in the image to be saved as textures in the sprite sheet meta file. User can specify color and sprite size of the texture.

Todo: make sure sprite sheet name is a valid file name
Note: the sprite sheet name is the meta file's name, but the sprite sheet image's name can be anything. It doesn't necessarily have to be the same
as the sprite sheet name.
// ------------------------------------------------------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------------------------------------------------------
Level editor:
1. User populates a list of enemies to spawn and their spawn locations (see Main MP spawn locations under Attack editor)
// ------------------------------------------------------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------------------------------------------------------
Enemy editor:
1. User attaches a sprite, spritesheet, and hitbox to the enemy
2. User specifies enemy HP
3. User populates a list of enemy phases and how they activate (EnemyPhaseStartCondition)
4. User gives enemy a name --> it is saved
// ------------------------------------------------------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------------------------------------------------------
Enemy phase editor:
1. User populates a phase with a list of attack pattern names and when they occur
2. User gives the phase a name --> it is saved
// ------------------------------------------------------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------------------------------------------------------
Attack pattern editor:
1. User populates a list of attacks and when they will occur
2. User populates a list of MPActions (only MPActions for main MP (see Attack editor) allowed)
3. User populates a list of sound effects to be played and when
4. User gives attack pattern a name --> it is saved

Internally, all "Move" and "Stay still" MPActions are combined into a single AggregatorMP
// ------------------------------------------------------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------------------------------------------------------
Attack editor:
1. The main MP is created
2. User specifies main MP spawn location
3. User can create sub-MPs (MPs whose reference is the main MP or another sub-MP)
4. User can attach any MP to a sprite and hitbox
5. User can give any MP a list of MPActions; the main MP must have at least 1 "Move" or "Stay still at specified location" MPAction so that its lifespan is known
6. User populates a list of sound effects to be played and when
7. User gives the attack a name --> it is saved

Main MP spawn locations:
Specified global position
Specified position relative to the attack's parent (some enemy) (a StationaryMP is dropped from parent at time of attack with lifespan equal to main MP's lifespan)
Specified position relative to the attack's parent's MP (some enemy's MP) (main MP will be moving relative to parent's motion; uses EntityMP)

MPActions only if is sub-MP:
Detach from parent (user must add at least 1 "Stay still" or "Move" MPAction after a detach)
				   (in-game, after detachment, the sub-MP will be attached to an AggregatorMP containing all MPActions after the detach)
				   (there cannot be more detach actions on a sub-MP than the depth of the reference tree (number of references deep until the main MP is encountered))

MPActions for all MPs: (code for main and sub-MP are the same)
Move to a position (basically a macro for linear movement at constant speed) (exists in the GUI only)
//TODO: maybe EPA for hovering (double dampened movement along some user-defined axis) (only in GUI)
Move custom
Stay still at last position for [x] seconds (there must be at least 1 "Move" or "Stay still at specified position" action before this one)
Stay still at specified position for [x] seconds (StationaryMP)
Loop a group of actions [x] times (user specifies odd or even expansion)

MPActions for main MP or if there is a detach action before these ones:
Move to player + offset
// these 3 are GUI only
Move to specific global position
Move in direction of player + offset (user must specify a speed)
Move in direction of specific global position (user must specify a speed)

For any "Move to" action, the user can specify the TFV used for distance
OR user can choose basic options: 
	-can specify a speed (will use LinearTFV with autocalculated time to expire when MP is out of bounds)
	-can specify a time
// ------------------------------------------------------------------------------------------------------------------------------------------------
	

// ------------------------------------------------------------------------------------------------------------------------------------------------
TFV editor:
1. User chooses a concrete TFV
2. User modifies parameters
3. Show the some value vs time graph at all times
// ------------------------------------------------------------------------------------------------------------------------------------------------