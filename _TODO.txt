always have a default spritesheet loaded

Documentation to put in the editor somewhere:
-When an enemy is killed, all bullets attached to it will despawn
-Sprite names cannot contain the characters '[' ']'
-No two sprite/animation can have the same name
-Idle/movement animatables can be sprites, but attack animatable must be an animation
-It is highly recommended that all animatables in all EntityAnimatableSets of all enemy phases in the same enemy look similar (have the same hitbox and sprite origin)
 because hitboxes and origins cannot change
-EMPs with HomingEMPA cannot spawn attached to some parent
-It is recommended that only bosses are able to play music
-The background view is 1:1. That is, the user will see a MAP_WIDTH x MAP_HEIGHT pixel rectangle of the background at any time

Tips to put in editor somewhere:
-For a classic bullet hell, all enemy bullets should do 1 damage

Notes for me:
-The mainEMP of an attack is always spawned at the exact same time of an attack; spawnType's time is ignored
-Remember to call animatableSetComponent.changeState on player when it attacks
-All sf::Sprite pointers in all Animations point to the same sf::Sprite object (if same name), so sf::Sprites from Animations must never be
 modified, since it will change all other Animations. On the other hand, all sf::Sprite pointers in each SpriteComponent point to unique sf::Sprite
 objects, so the sf::Sprite pointer in SpriteEffectAnimation MUST point to a SpriteComponent's pointer (so when setting SpriteEffectAnimation, 
 spriteComponent.getSprite() must be used) so that other sf::Sprites are not affected.
-Sprite origin and hitbox origin must be the same values
-sf::Sprite's origin is relative to the texture's top-left coordinates and ignores scale/rotation/transformations
-All TFVs in the editor are stored internally as PiecewiseContinuousTFVs
-To loop an animation x times, copy paste the frame data x times
-Since LevelPack::playSound/Music adds the "Level Packs/level_pack_name/..." to sound/music file names, any sound or music that is located
 in the level pack folder must be played through LevelPack
-Since HitboxComponent's update is only for updating hitbox disable time and only the player's hitbox can be disabled, only the player's hitbox is updated
 in CollisionSystem. Change to update all HitboxComponents if this changes.

-Item path is in Components::CollectibleComponent::update and EntityCreationQueue::EMPDropItemCommand::execute
-Player invulnerability sprite effect animation is in CollisionSystem

bomb gui

TODO:
-insert items into spatial hash tables in collectiblesystem with radius=max(activation_radius, hitbox) and do collision checks for activation in the system
 instead of in the component; update() probably not even needed at all
-make EMPAngleOffset also work with bezier curves by rotating all points around 0,0 by that evaluated angle
-have some default attack patterns (https://www.youtube.com/watch?v=xbQ9e0zYuj4)
-all default stuff (font, spritesheet, sounds, etc) are copied into every new level pack that is created so that no special code is needed to load
 from a default resource 
-boss name color, boss hp bar color, player hp bar color (health image if using discrete player hp bar) are options in Level
-draw all GUI related text to a tgui::Canvas, using a shader that creates a text border
-bosses can only be spawned if the condition is that there are 0 enemies so that there can only be 1 boss at a time
-default bloom settings are part of the level. they can be lowered by the user playing it (checkbox 
-flatten layers PLAYER_BULLET_LAYER through PLAYER_LAYER and then apply bloom to that single squished texture for more efficiency
-enemies can be bosses -> GUI displays a health bar
-Multiple small shockwave effects 
-DeathActions: ExecuteAttack (enemies only), ParticleExplosion
-Change sprite sheet meta files to use TextMarshallable
	-Due to the user-unfriendliness of text-marshalled files, this should only be done if an image viewer can be implemented in the editor
	 that can zoom in and make rectangles so that the user has full control of 
	  setting origin/rectangle_coords/everything_field_in_sprite_sheet_metadata in the editor
-Editor features
	-"Rotate bullet path": user can select multiple EMPActions (even across different bullets) and rotate them
		-for MoveCustomPolarEMPA, this just wraps the angle TFV in a TranslationWrapperTFV (remember to combine the TFVs if the angle TFV is already a TranslationWrapperTFV)
		-for MoveCustomBezierEMPA, this rotates all control points about (0, 0)
		-for all other EMPAs, do nothing
	-"Set bullet model": user can select multiple EMPs and set their bullet models
	  
// ------------------------------------------------------------------------------------------------------------------------------------------------
editable = attack/attack pattern/emp/enemy/enemyphase/player
id-editable = attack/attack pattern/enemy/enemyphase
one big editor instead of multiple things for each editable

when simulating (testing) in the editor, 
give all entites an Editor(EnemyBullet/Enemy/Player)Component that has the ids of the Editor______ objects so that
user can click on a bullet/enemy and view the attack/attackpattern/emp/enemy/enemyphase/player it belongs to

click entity --> opens up windows/tabs/whatever for all the Editor_____ components it has; ie:
Click enemy bullet --> open Attack, AttackPattern, Enemy, EnemyPhase
Click enemy --> open Attack, AttackPattern, Enemy, EnemyPhase
Click player --> open Player

When making changes to and then saving an editable that is used by multiple other editables one layer up
(enemy > enemy phase; enemy > attack pattern; attack pattern > attack), ask user to confirm before saving ("this change will affect multiple other enemies/attack patterns")

every editable is local only to the level pack
user can load a different level pack and choose which id-editables to import
// ------------------------------------------------------------------------------------------------------------------------------------------------


Move custom = player chooses the MP to use and manually defines the relevant TFVs
TODO: find some way of loading and saving TFVs and MPs such that no duplicate ones are created
eg if there are 500 sub-MPs with 1 MP as reference, make sure there won't be 500*500 MPs created

MP = movable point
global position = position ignoring all references

// ------------------------------------------------------------------------------------------------------------------------------------------------
Sprite sheet editor:
1. User creates a new sprite sheet and gives it a name
2. User loads an image associated with that sprite sheet
3. User can select rectangles in the image to be saved as textures in the sprite sheet meta file. User can specify color and sprite size of the texture.

Todo: make sure sprite sheet name is a valid file name
Note: the sprite sheet name is the meta file's name, but the sprite sheet image's name can be anything. It doesn't necessarily have to be the same
as the sprite sheet name.
// ------------------------------------------------------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------------------------------------------------------
Level editor:
1. User populates a list of enemies to spawn and their spawn locations (see Main MP spawn locations under Attack editor)
// ------------------------------------------------------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------------------------------------------------------
Enemy editor:
1. User attaches a sprite, spritesheet, and hitbox to the enemy
2. User specifies enemy HP
3. User populates a list of enemy phases and how they activate (EnemyPhaseStartCondition)
4. User gives enemy a name --> it is saved
// ------------------------------------------------------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------------------------------------------------------
Enemy phase editor:
1. User populates a phase with a list of attack pattern names and when they occur
2. User gives the phase a name --> it is saved
// ------------------------------------------------------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------------------------------------------------------
Attack pattern editor:
1. User populates a list of attacks and when they will occur
2. User populates a list of MPActions (only MPActions for main MP (see Attack editor) allowed)
3. User populates a list of sound effects to be played and when
4. User gives attack pattern a name --> it is saved

Internally, all "Move" and "Stay still" MPActions are combined into a single AggregatorMP
// ------------------------------------------------------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------------------------------------------------------
Attack editor:
1. The main MP is created
2. User specifies main MP spawn location
3. User can create sub-MPs (MPs whose reference is the main MP or another sub-MP)
4. User can attach any MP to a sprite and hitbox
5. User can give any MP a list of MPActions; the main MP must have at least 1 "Move" or "Stay still at specified location" MPAction so that its lifespan is known
6. User populates a list of sound effects to be played and when
7. User gives the attack a name --> it is saved

Main MP spawn locations:
Specified global position
Specified position relative to the attack's parent (some enemy) (a StationaryMP is dropped from parent at time of attack with lifespan equal to main MP's lifespan)
Specified position relative to the attack's parent's MP (some enemy's MP) (main MP will be moving relative to parent's motion; uses EntityMP)

MPActions only if is sub-MP:
Detach from parent (user must add at least 1 "Stay still" or "Move" MPAction after a detach)
				   (in-game, after detachment, the sub-MP will be attached to an AggregatorMP containing all MPActions after the detach)
				   (there cannot be more detach actions on a sub-MP than the depth of the reference tree (number of references deep until the main MP is encountered))

MPActions for all MPs: (code for main and sub-MP are the same)
Move to a position (basically a macro for linear movement at constant speed) (exists in the GUI only)
//TODO: maybe EPA for hovering (double dampened movement along some user-defined axis) (only in GUI)
Move custom
Stay still at last position for [x] seconds (there must be at least 1 "Move" or "Stay still at specified position" action before this one)
Stay still at specified position for [x] seconds (StationaryMP)
Loop a group of actions [x] times (user specifies odd or even expansion)

MPActions for main MP or if there is a detach action before these ones:
Move to player + offset
// these 3 are GUI only
Move to specific global position
Move in direction of player + offset (user must specify a speed)
Move in direction of specific global position (user must specify a speed)

For any "Move to" action, the user can specify the TFV used for distance
OR user can choose basic options: 
	-can specify a speed (will use LinearTFV with autocalculated time to expire when MP is out of bounds)
	-can specify a time
// ------------------------------------------------------------------------------------------------------------------------------------------------
	

// ------------------------------------------------------------------------------------------------------------------------------------------------
TFV editor:
1. User chooses a concrete TFV
2. User modifies parameters
3. Show the some value vs time graph at all times
// ------------------------------------------------------------------------------------------------------------------------------------------------